input {
}
filter {
  mutate {
    add_field => { 
      "[event][module]" => "infoblox" 
      "[event][dataset]" => "dns"
      "[event][kind]" => "event"
      "[ecs][version]" => "1.7.0"
      "[observer][vendor]" => "Infoblox"
    }
    add_tag => "infoblox"
  }
  if [type] == "syslog-infoblox" {
    mutate {
      copy => {"message" => "[event][original]"}
      rename => {
        "host" => "[observer][hostname]" 
      }
    }
    grok {
      match => {
        "message" => "<%{POSINT:[event][severity]}>%{SYSLOGTIMESTAMP:[event][created]}  %{HOSTNAME:[host][hostname]} %{IPV4:[host][ip]} %{DATA:[agent][type]}(?:\[%{POSINT}\])?: %{GREEDYDATA:syslog_message}"
      }
    }
    mutate {
      copy => { "[host][hostname]" => "hostname_copy" }
    }
    mutate {
      split => { "hostname_copy" => "." }
      add_field => { "[host][name]" => "%{[hostname_copy][0]}" }  
    }
    date {
      match => [ 
        "[event][created]", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss" 
      ]
      timezone => "UTC"
      target => "[event][created]"
    }
    translate {
      dictionary_path => [ "/etc/logstash/conf.d/dictionaries/infoblox_syslogpri.yml" ]
      field => "[event][severity]"
      destination => "[log][level]"
    }
    if [agent][type] == "named" {
      grok {
        pattern_definitions => {
          "DNSLOG_TIMESTAMP" => "%{MONTHDAY}-%{MONTH}-%{YEAR} %{HOUR}:%{MINUTE}:%{SECOND}"
          "DNS_FLAG" => "[\-\+]\w*"
        }
        match => {
          "syslog_message" => [
            "^%{DNSLOG_TIMESTAMP:dnslog_timestamp} client %{IP:[client][ip]}#%{NUMBER:[client][port]}: %{WORD:[client][protocol]}: query: %{DATA:[dns][question][name]} %{WORD:[dns][question][class]} %{WORD:[dns][question][type]} response: %{WORD:[dns][response_code]} %{DNS_FLAG:[dns][response_flag]}$",
            "^%{DNSLOG_TIMESTAMP:dnslog_timestamp} client %{IP:[client][ip]}#%{NUMBER:[client][port]}: %{WORD:[client][protocol]}: query: %{DATA:[dns][question][name]} %{WORD:[dns][question][class]} %{WORD:[dns][question][type]} response: %{WORD:[dns][response_code]} %{DNS_FLAG:[dns][response_flag]} %{GREEDYDATA:dns_response}$",
            "^infoblox-responses: %{DNSLOG_TIMESTAMP:dnslog_timestamp} client %{IP:[client][ip]}#%{NUMBER:[client][port]}: %{WORD:[client][protocol]}: query: %{DATA:[dns][question][name]} %{WORD:[dns][question][class]} %{WORD:[dns][question][type]} response: %{WORD:[dns][response_code]} %{DNS_FLAG:[dns][response_flag]}$",
            "^infoblox-responses: %{DNSLOG_TIMESTAMP:dnslog_timestamp} client %{IP:[client][ip]}#%{NUMBER:[client][port]}: %{WORD:[client][protocol]}: query: %{DATA:[dns][question][name]} %{WORD:[dns][question][class]} %{WORD:[dns][question][type]} response: %{WORD:[dns][response_code]} %{DNS_FLAG:[dns][response_flag]} %{GREEDYDATA:dns_response}$",
            "^client %{IP:[client][ip]}#%{NUMBER:[client][port]}: update '%{DATA:[dns][question][name]}/%{WORD:[dns][question][class]}' %{GREEDYDATA:[dns][answers][data]}$"
          ]
        }
        add_tag => ["named"]
      }
      date {
        match => [ 
          "dnslog_timestamp", "dd-MMM-yyyy HH:mm:ss.SSS"
        ]
        timezone => "UTC"
      }
      tld {
        source => "[dns][question][name]"
        target => "tld_results"
      }
      mutate {
        rename => {
          "[tld_results][domain]" => "[dns][question][registered_domain]"
          "[tld_results][trd]" => "[dns][question][subdomain]"
          "[tld_results][tld]" => "[dns][question][top_level_domain]"
        }
        remove_field => ["dnslog_timestamp", "type", "tld_results", "syslog_message", "port", "hostname_copy"]
      }
      if [dns_response] =~ /.+/ {
        split {
          field => "dns_response" 
          terminator => ";"
        }
        grok {
          match => {
            "dns_response" => [
              "%{HOSTNAME:[dns][answers][name]} %{NUMBER:[dns][answers][ttl]} %{WORD:[dns][answers][class]} %{WORD:[dns][answers][type]} %{IP:dns_answers_ip}",
              "%{HOSTNAME:[dns][answers][name]} %{NUMBER:[dns][answers][ttl]} %{WORD:[dns][answers][class]} %{WORD:[dns][answers][type]} %{HOSTNAME:[dns][answers][data]}"
            ]
          }
        }
        if [dns_answers_ip] =~ /.+/ {
          ruby {
            code => '
              langValue = event.get("dns_answers_ip")

              langArray = []
              langArray << langValue

              event.set("dns.resolved_ip", langArray)
            '
          }
          mutate {
            copy => { "dns_answers_ip" => "[dns][answers][data]" }
            rename => { "dns.resolved_ip" => "[dns][resolved_ip]"}
            remove_field => "dns_answers_ip"
          }
        }
        mutate {
          remove_field => "dns_response"
        }
      }
    }
    else {
      mutate {
        add_tag => ["not_named"]
      }
    }
  }
}
output {
}
