input {
}
# separator in csv and dissect filters below is a literal tab character; NOT whitespace
# 
# NB: here, the incoming data is not strictly valid CSV, as some fields contain double quote characters
# that are not themselves enclosed by double quotes. There are various approaches and workarounds, with various
# degrees of modifying the original data. The approch below is a hybrid csv + dissect approach, as the csv filter
# is retained for its simplicity and other advantages, and the dissect filter should handle the remaining lines.
filter {
    csv {
        separator => "	"
        columns => [
            "log_timestamp",
            "traffic_direction",
            "message_id",
            "local_port",
            "remote_host",
            "smtp_command",
            "smtp_command_details",
            "smtp_response",
            "bytes_sent",
            "bytes_received",
            "smtp_auth_username",
            "message_subject"
        ]
    }
    if "_csvparsefailure" in [tags] {
        dissect {
            mapping => {
                "message" => "%{log_timestamp}	%{traffic_direction}	%{message_id}	%{local_port}	%{remote_host}	%{smtp_command}	%{smtp_command_details}	%{smtp_response}	%{bytes_sent}	%{bytes_received}	%{smtp_auth_username}	%{message_subject}"
            }
        }
        mutate {
            remove_tag => ["_csvparsefailure"]
        }
    }
    if "_dissectfailure" in [tags] {
        dissect {
            mapping => {
                "message" => "%{log_timestamp}	%{traffic_direction}	%{message_id}	%{local_port}	%{remote_host}	%{smtp_command}	%{smtp_command_details}	%{smtp_response}	%{bytes_sent}	%{bytes_received}	%{smtp_auth_username}"
            }
            tag_on_failure => ["_csv-and-dissect-failure"]
        }
        mutate {
            remove_tag => ["_dissectfailure"]
        }
    }
    mutate {
        add_field => { 
            "[event][module]" => "smtp" 
            "[event][dataset]" => "smtp-log"
            "[event][kind]" => "event"
            "[observer][hostname]" => "smtp-server-hostname"
        }
    }
    if [traffic_direction] == "SMTP-IN" {
        mutate {
            rename => {
                "[remote_host]" => "[source][ip]"
                "[bytes_received]" => "[source][bytes]"
                "[bytes_sent]" => "[destination][bytes]"
                "[local_port]" => "[destination][port]"
            }
        }
    }
    if [traffic_direction] == "SMTP-OU" {
        mutate {
            rename => {
                "[remote_host]" => "[destination][ip]"
                "[bytes_sent]" => "[source][bytes]"
                "[bytes_received]" => "[destination][bytes]"
                "[local_port]" => "[source][port]"
            }
        }
    }
    if [smtp_command] == "EHLO" {
        grok {
            match => {
                "smtp_command_details" => "EHLO %{GREEDYDATA:[client][address]}"
            }
            tag_on_failure => [] # usually a STARTTLS message or similar
        }
    }
    if [smtp_command] == "HELO" {
        grok {
            match => {
                "smtp_command_details" => "HELO %{GREEDYDATA:[client][address]}"
            }
            tag_on_failure => []
        }
    }
    if [smtp_command] == "RCPT" {
        grok {
            match => {
                "smtp_command_details" => "RCPT TO:<%{GREEDYDATA:[email][recipient]}>"
            }
            tag_on_failure => ["_grokfail-no-email-address"]
        }
        mutate {
            copy => { "[email][recipient]" => "[email][recipient_normalized]" }
        }
        mutate {
            lowercase => [ "[email][recipient_normalized]" ]
        }
    }
    if [smtp_command] == "MAIL" {
        grok {
            match => {
                "smtp_command_details" => "MAIL FROM:<%{GREEDYDATA:[email][sender]}>"
            }
            tag_on_failure => ["_grokfail-no-email-address"]
        }
        mutate {
            copy => { "[email][sender]" => "[email][sender_normalized]" }
        }
        mutate {
            lowercase => [ "[email][sender_normalized]" ]
        }
    }
    if [smtp_response] {
        grok {
            match => {
                "smtp_response" => [
                    "%{POSINT:[smtp][response_code]}-%{GREEDYDATA:[smtp][response_msg]}",
                    "%{POSINT:[smtp][response_code]} %{GREEDYDATA:[smtp][response_msg]}"
                ]
            }
            tag_on_failure => ["_grokfail-new-smtp-response-format"]
        }
    }
    mutate {
        rename => {
            "[@timestamp]" => "[event][created]"
            "[hostname_copy]" => "[host][hostname]"
            "[message_id]" => "[email][id]"
            "[message_subject]" => "[email][subject]"
            "[smtp_command]" => "[smtp][command]"
            "[smtp_command_details]" => "[smtp][command_details]"
            "[smtp_response]" => "[smtp][response]"
            "[smtp_auth_username]" => "[smtp][auth_username]"
            "[traffic_direction]" => "[smtp][traffic_direction]"
        }
    }
    date {
        match => ["log_timestamp", "MM/dd/yy HH:mm:ss"]
    }
    mutate {
        remove_field => ["log_timestamp"]
    }
}
output {
}