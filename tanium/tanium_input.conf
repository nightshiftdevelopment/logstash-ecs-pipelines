input {  
}
filter {
  prune {
    blacklist_names => ["header"]
  }  
  date {
    match => ["timestamp", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSS'000'ZZ"]
    timezone => "UTC"
  }
  # move fields with ECS field name conflicts to tmp field
  mutate {
    rename => {
      "host" => "tmp.host"
      "event" => "tmp.event"
    }
    remove_field => ["host", "event"]
  }
  mutate {
    add_field => { 
      "[event][module]" => "tanium" 
      "[event][dataset]" => "tanium.stream"
      "[event][kind]" => "event"
      "[ecs][version]" => "1.7.0"
      "[observer][vendor]" => "Tanium"
      "message" => "{'host':%{tmp.host}, 'timestamp':%{timestamp}, 'tanium_computer_id':%{tanium_computer_id}, 'event':%{tmp.event}, 'hostname':%{hostname},  'fields':%{fields}}"
      "[event][original]" => "%{fields}"
    }
    copy => { 
      "hostname" => "hostname_copy"
    }
  }
  mutate {
    split => { "hostname_copy" => "." }
    add_field => { "[host][name]" => "%{[hostname_copy][0]}" }  
  }
  grok {
    match => { 
      "[fields][parent__file__full_path]" => "%{GREEDYDATA:preamble}\\%{GREEDYDATA:[process][parent][name]}"
    }
    tag_on_failure => []
  }
  grok {
    match => { 
      "[fields][file__full_path]" => "%{GREEDYDATA:preamble}\\%{GREEDYDATA:[process][name]}"
    }
    tag_on_failure => []
  }
  grok {
    match => { 
      "[fields][process__file__full_path]" => "%{GREEDYDATA:preamble}\\%{GREEDYDATA:[process][name]}"
    }
    tag_on_failure => []
  }
  grok {
    match => { 
      "[fields][full_path]" => "%{GREEDYDATA:preamble}\\%{GREEDYDATA:[file][name]}"
    }
    tag_on_failure => []
  }
  grok {
    match => {
      "[fields][key]" => "%{DATA:[registry][root_key]}\\%{GREEDYDATA:registry_keys}"
    }
    tag_on_failure => []
  }
  translate {
    dictionary_path => [ "/etc/logstash/conf.d/dictionaries/registry_rootkeys.yml" ]
    field => "[registry][root_key]"
    destination => "[registry][hive]"
  }
  ruby {
    code => '
      if event.get("registry_keys")
        object = event.get("registry_keys")
        values = object.split("\\")
        event.set("[registry][keys]", values)
      end
    '
  }
  mutate {
    add_tag => "tanium"
    rename => {
      "hostname" => "[host][hostname]"
      "tmp.host" => "[host][ip]"
      "tanium_computer_id" => "[host][id]"
      "tmp.event" => "[event][action]"

      "[fields][parent__command_line]" => "[process][parent][command_line]"
      "[fields][parent_pid]" => "[process][ppid]"
      "[fields][parent__file__full_path]" => "[process][parent][executable]"
      "[fields][command_line]" => "[process][command_line]"
      "[fields][pid]" => "[process][pid]"
      "[fields][user__name]" => "[user][name]"
      "[fields][user__group]" => "[group][name]"
      "[fields][file__full_path]" => "[process][executable]"
      "[fields][file__md5]" => "[file][hash][md5]"
      "[fields][tanium_process_id]" => "[process][entity_id]"
      "[fields][tanium_parent_process_id]" => "[process][parent][entity_id]"
      "[fields][create_time]" => "[process][start]"

      "[fields][process__user__name]" => "[user][name]"
      "[fields][process__user__group]" => "[group][name]"
      "[fields][process__pid]" => "[process][pid]"
      "[fields][full_path]" => "[file][path]"
      "[fields][process__file__full_path]" => "[process][executable]"

      "[fields][response]" => "[dns][response]"
      "[fields][query]" => "[dns][question][name]"

      "[fields][local_ip]" => "[source][ip]"
      "[fields][local_port]" => "[source][port]"
      "[fields][remote_ip]" => "[destination][ip]"
      "[fields][remote_port]" => "[destination][port]"

      "[fields][key]" => "[registry][key]"
      "[fields][value_name]" => "[registry][value]"
    }
    remove_field => [
      "fields", "timestamp", "hostname_copy", 
      "process_executable_copy", "file_path_copy", "preamble", "registry_keys"
      ]
  }
  tld {
    source => "[dns][question][name]"
    target => "tld_results"
  }
  mutate {
    rename => {
      "[tld_results][domain]" => "[dns][question][registered_domain]"
      "[tld_results][trd]" => "[dns][question][subdomain]"
      "[tld_results][tld]" => "[dns][question][top_level_domain]"
    }
    remove_field => ["tld_results"]
  }
  if [dns][response] =~ /.+/ {
    mutate {
      split => { "[dns][response]" => ";" }
    }
  }
  if [event][action] in ["file_write", "file_create", "file_delete"] {
    mutate {
      add_field => { "[event][category]" => ["file"] }
    }
  }
  if [event][action] in ["network_connect", "network_disconnect", "network_accept"] {
    mutate {
      add_field => { "[event][category]" => ["network"] }
    }
  }
  if [event][action] in ["process_start"] {
    mutate {
      add_field => { "[event][category]" => ["process"] }
    }
  }
}
output {
}
